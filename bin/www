#!/usr/bin/env node
const http = require('http');
const debug = require('debug')('players-api-skeleton:server');
const normalizePort = require('normalize-port');
const app = require('../src/server');
const models = require('../src/models');


/**
 * get port from env
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * create http server
 */
const server = http.createServer(app);

models.sequelize.sync({ force: true }).then(function() {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}